函数式编程与大语言模型
亚里士多德在范畴里提出了基本的范畴，但亚里士多德的本体论没有区分“事物（对象）”与“事物之间的关系（morphism）”。所以本质来说亚里士多德的现象学也属于他的范畴论的子集。也就是说“苹果下落”这个现象学命题在亚里士多德来说是本体论的。这种认知体系不存在什么理论上的问题，但是其对于后世学者的认知造成了一种模糊的影响。而当代基础数学的研究范式是“范畴论”的，也就是将“事物”，与“事物的关联（某种映射或者更一般来说是关系）”结构化成范畴的概念。这样当我们试图去理解一个现象，就可以按照“现象涉及的事物”以及“现象涉及的事物之间的关系”两种方式去构造一个理论来解释该现象（当然理论化之后还要进入“有效性评断”的过程，这是当前“科学认识论”的一般范式）。
从语义角度，更一般的现象可以被理解成“具有某种经验真实性支撑的论断”。也就是说可以被判定为“真”的一种经验的语言学表达。这里假设了 1）具备可以被判断的形式可能性（通过形式逻辑进行） 2）该形式可能性来自于某种具体“经验”的形式化。
也就是说当我们从语义角度说一个论断为真，这种真值具备某种“经验”的真实性支撑。当然这里需要澄清一种情况就是“循环论证”，“循环论证的某种实现”在“循环论证”的语义解释下也为真，这种真实性来自于“经验约定”，所以也是经验性的。
根据这种抽象（abstraction， not pumping elephant#标记一下“抽象”这个中文词的语义的劣化，改天讨论一下），语言学或者近代逻辑学者定位了这种"抽象"行为的承接对象为 “谓词/predicate”。而谓词的更一般的抽象叫做“关系/relation（继而逻辑学存在一个分支称之为“relational logic”）”.
本文讨论“relation”的一个特殊情况“function”，以及根据“function”可以得到的两种编程范式 1）functionality 功能性编程 2）functional 函数式编程。当然本文着重点在于两种编程背后的思维范式 1）对于数据（零碎经验）的归纳 2）对于现象规律的归纳。并解释其在科学哲学和实证主义科学观中的意义。
什么是“函数”（明确的）
一个明确的函数要不然是将给定的定义域上的明确的对象映射成值域上的明确的对象，要不然是给定一个显性的将可以作用于定义域上的一个不定元算符映射成值域上的一个不定元算符。前者的定义是通过“任意符合该条件的“数对”的整体”作为一个集合来描述其对应的函数。而后者是通过某种明确的“映射规则”给出该函数的作用形式。于是我们可以将该规则“应用”到某个定义域的对象上，由于该规则根据定义是明确的，则其会生成一个明确的值域上的对象。
由此不难得知，关于某函数f的知识，要不全部由“数对”集体现，要不由该“规则”所描述
显性给定的规则式演绎的函数论
当我们知道一个具体的规则f（x）=2x的同时，我们可以有法则x->2x。基于功能性的编程，也就是应用一个“功能性”的法则到一个初始对象。将该对象转换成“实现了该功能”之后的对象。举个例子比如我们要创建一个文件夹，那这里的x就是文件系统，应用的规则就是改变该文件系统的状态通过施加“创建一个文件夹”这个操作。于是这个过程之后我们的文件系统的相应位置里就会出现一个新的具有明晰的文件名的文件夹（“明晰性”来自于我们要求的“法则”的具体性）。
包括当我们在电脑游戏中激发“事件”以及利用c++或者高级语言去实现某个“过程”（但这里还不太一样，比如写代码本身其实是通过synthetic approach去给出一个“被抽象过的软件过程”一个binary（二进制）的实现，但是玩游戏则是在“抽象层面”实现的功能性演绎。借助计算机可以实现从“binary”的电路的算术跨度到“软件层抽象”，“物理层抽象”，“数学模拟的抽象”之一的实现（这个以后也可以解释一下如何从纯推理的角度理解非函数式编程的计算机的使用的认识论，以及更一般根据“功能性”进行推理的软件设计的认识论））
显性给定“数对”集的函数论与lambda calculus
函数式编程就是通过“数对”来拟合“函数”，从逻辑层面可以理解成利用数据来进行lambda calculus从而得到最终的“映射”，但也因此失去了“拟合结果函数”的单值性的保证。也就是说一个数据集可能给出完全不同的函数。也有可能拟合的函数进入一个亚稳态
而不是真稳态。而监督学习的过程指的就是通过人工从外界向程序本身提供数据集（每一个数据集被提供这件事默认了提供的数据的“真”的属性是绝对的），而强化学习则是利用“已有的数据”的模糊性进行自回归纠错（因为初始模型的参数是随机的，所以在学习的过程中由于参数的变化会造成模型内部的某些数据在模型的存在形式是“概率真”，这个时候就可以通过对于这种“概率真”的数据点进行重复采样并将其期望值理解成最终收敛到的唯一的“真”的数据（当然这里假设的收敛性并不显然。））
函数式编程，与通过数据抽象现象的规律性描述，“真理存在主义”的科学范式
科学的实验方法的合理性预设了“现实的实验”的归纳的收敛性，也就是说如果实验数据不能给出一个收敛的预测，那每一次实验的结果都不在预料之内，这种时刻做实验就没有意义。也就是“物理学（或者更一般意义的现象学）”消失了。当然不存在“事实可行”的“无穷”词实验。所以我们要对有限次实现的结果进行拟合，并对“归纳”的“无穷才真实”进行一定的妥协，于是我们就可以走出休谟的归纳问题。并给出“统计”的实验认识论/这是今天的实验科学必须要学统计学的本质原因。“归纳”在有限次之内就可以收敛到某种有效真理（或者说给出一个现象学的有效刻画）就是“真理存在（事实上有效得存在）”的科学范式。当然，不相信“实验”的可归纳性是朴素的经验直觉主义。这种前现代的炼金术式的认识范式今天依然存在，但其事实上对待复杂系统的刻画基本上是无效的。
功能性编程与通过给定的现象规律对于数据的预测的“科学实用论”的态度
科学实用论对于“经验归纳”的态度部分是悲观的，他们认为我们的归纳只需要到达一定的有效性，没必要去“过度”归纳从而使自身的认识范式从“科学”的进入“纯粹形而上学”的，而由于后者是非经验有效的，最终会陷入类似“宗教狂热”的态度，过于痴迷某种形而上学的乌托邦
